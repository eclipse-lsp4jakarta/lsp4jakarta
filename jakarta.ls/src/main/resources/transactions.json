{
	"Initialize a UserTransaction object via Injection": {
		"prefix": "userTransactionInjection",
		"body": [
			"@Resource",
			"UserTransaction ${1:TransactionName};",
			"",
			"public void ${2:FunctionName}(){",
			"\ttry {",
			"\t\t${1:TransactionName}.begin();",
			"",
			"\t\t/* operation */",
			"\t",
			"\t\t${1:TransactionName}.commit();",
			"\t} catch (Exception e1) {",
			"\t\ttry {",
			"\t\t\t${1:TransactionName}.rollback();",
			"\t\t} catch (Exception e2){",
			"\t\t\te2.printStackTrace();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Initializes a UserTransaction object via Injection. Provides a template for begin(), commit(), and rollback() of the said UserTransaction object.",
		"context": {
			"type": "jakarta.transaction.UserTransaction"
		}
	},
	"Initialize a UserTransaction object via JNDI Lookup": {
		"prefix": "userTransactionJNDI",
		"body": [
			"UserTransaction ${1:TransactionName} = (UserTransaction) context.lookup(\"${2:Address}\");",
			"",
			"try {",
			"\t${1:TransactionName}.begin();",
			"",
			"\t/* operation */",
			"",
			"\t${1:TransactionName}.commit();",
			"} catch (Exception e1) {",
			"\ttry {",
			"\t\t${1:TransactionName}.rollback();",
			"\t} catch (Exception e2){",
			"\t\te2.printStackTrace();",
			"\t}",
			"}"
		],
		"description": "Initializes a UserTransaction object via JNDI lookup. Provides a template for begin(), commit(), and rollback() of the said UserTransaction object.",
		"context": {
			"type": "jakarta.transaction.UserTransaction"
		}
	}
}